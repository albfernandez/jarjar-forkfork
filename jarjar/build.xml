<?xml version='1.0' encoding='UTF-8'?>
<project name="Jar Jar Links" default="compile">
    <property file="${user.home}/build.properties" />
    <property file="build.properties" />

    <property name="src" location="src"/>
    <property name="lib" location="lib"/>
    <property name="build" location="build"/>
    <property name="dist" location="dist"/>

    <property name="javadoc" location="${dist}/javadoc"/>
    <property name="javadoc.access" value="public"/>

    <property name="compile.debug" value="true"/>
    <property name="compile.deprecation" value="false"/>
    <property name="compile.optimize" value="false"/>
    <property name="compile.source" value="1.3"/>
    <property name="compile.target" value="1.2"/>
    <property name="compile.bootclasspath" value=""/>  <!-- value="lib/rt.jar" -->
    <property name="compile.extdirs" value=""/>

    <property name="version" value="0.3-dev"/>
    <property name="jarfile" value="${dist}/jarjar-${version}.jar"/>

    <property name="test.jar" value="${build}/rejar.jar"/>

    <target name="init">
        <tstamp/>
        <path id="path.build">
            <fileset dir="${lib}" includes="**/*.jar"/>
        </path>
        <path id="path.run">
            <path refid="path.build"/>
            <pathelement path="${build}/main"/>
            <pathelement path="${build}/dev"/>
        </path>
        <path id="path.test">
            <path refid="path.run"/>
            <pathelement path="${build}/test"/>
        </path>
    </target>

    <target name="compile" depends="init" description="Compile">
        <mkdir dir="${build}/main"/>
        <copy todir="${build}/main">
            <fileset dir="${src}/main" excludes="**/*.java"/>
        </copy>
        <javac srcdir="${src}/main" destdir="${build}/main"
          source="${compile.source}" target="${compile.target}" bootclasspath="${compile.bootclasspath}" extdirs="${compile.extdirs}"
          debug="${compile.debug}" optimize="${compile.optimize}" deprecation="${compile.deprecation}">
             <classpath refid="path.build"/>
        </javac>
    </target>

    <target name="compile-test" depends="compile" description="Compile tests">
        <mkdir dir="${build}/test"/>
        <copy todir="${build}/test">
            <fileset dir="${src}/test" excludes="**/*.java"/>
        </copy>
      <javac srcdir="${src}/main" destdir="${build}/main"
          source="${compile.source}" target="${compile.target}" bootclasspath="${compile.bootclasspath}" extdirs="${compile.extdirs}"
          debug="${compile.debug}" optimize="${compile.optimize}" deprecation="${compile.deprecation}">
             <classpath refid="path.run"/>
        </javac>
    </target>

    <target name="test" description="Run JUnit tests">
        <antcall target="junit"/>
        <antcall target="test-rejar"/>
    </target>

    <target name="junit" depends="compile-test">
        <junit>
            <!-- <jvmarg value="-Xint"/> -->
            <!-- <jvmarg value="-Xprof"/> -->
            <!-- <jvmarg value="-server"/> -->
            <formatter type="plain" usefile="false"/>
            <classpath refid="path.test"/>
            <batchtest>
                <fileset dir="${src}/test" includes="**/*Test.java"/>
            </batchtest>
        </junit>
    </target>

    <target name="clean" depends="init" description="Clean">
        <delete dir="${build}"/>
        <delete dir="${dist}"/>
        <delete dir="${javadoc}"/>
    </target>

    <target name="jar" depends="compile" description="Create Jar">
        <mkdir dir="${dist}"/>
	<taskdef name="jarjar" classname="com.tonicsystems.jarjar.JarJarTask" classpathref="path.run"/>
        <jarjar jarfile="${jarfile}">
            <fileset dir="${build}/main"/>
            <zipfileset src="${lib}/asm.jar"/>
            <zipfileset src="${lib}/asm-attrs.jar"/>
            <zipfileset src="${lib}/gnu-regexp.jar"/>
            <rule pattern="org.objectweb.asm.**" result="com.tonicsystems.jarjar.asm.@1"/>
            <rule pattern="gnu.**" result="com.tonicsystems.jarjar.@0"/>
        </jarjar>
    </target>

    <target name="test-rejar" depends="jar">
	<taskdef name="jarjar2" classname="com.tonicsystems.jarjar.JarJarTask" classpath="${jarfile}"/>
        <jarjar2 jarfile="${test.jar}">
            <fileset dir="${build}/main"/>
            <zipfileset src="${lib}/asm.jar"/>
            <zipfileset src="${lib}/asm-attrs.jar"/>
            <zipfileset src="${lib}/gnu-regexp.jar"/>
            <rule pattern="org.objectweb.asm.**" result="com.tonicsystems.jarjar.asm.@1"/>
            <rule pattern="gnu.**" result="com.tonicsystems.jarjar.@0"/>
        </jarjar2>
        <delete file="${test.jar}"/>
    </target>

    <target name="thirdparty" depends="compile">
	<taskdef name="jarjar" classname="com.tonicsystems.jarjar.JarJarTask" classpathref="path.run"/>
        <delete file="${test.jar}"/>
        <jarjar jarfile="${test.jar}" verbose="yes">
            <zipfileset src="${thirdparty}"/>
            <rule pattern="com.**" result="xxx.@0"/>
            <rule pattern="net.**" result="xxx.@0"/>
            <rule pattern="org.**" result="xxx.@0"/>
            <rule pattern="edu.**" result="xxx.@0"/>
        </jarjar>
        <delete file="${test.jar}"/>
    </target>

    <!-- TODO: reference ant javadocs -->
    <target name="javadoc" depends="compile" description="Generate the javadoc">
        <mkdir dir="${javadoc}"/>
        <javadoc 
          sourcepath="${src}/main"
          destdir="${javadoc}"
          access="${javadoc.access}"
          failonerror="true"
          packagenames="com.tonicsystems.jarjar.*"
          classpathref="path.run"
          Author="true"
          Version="true"
          Use="true"
        />
    </target>

    <target name="dist" depends="clean,test,javadoc">
        <!-- TODO -->
    </target>
</project>
